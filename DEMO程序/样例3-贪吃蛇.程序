有一种方法 接受输入：【蛇数据】、[x]、[y] ，取名为 【蛇吃进食物】：
  有一个数字0，取名为【蛇的节点】；
  有一个数字0，取名为【蛇的长度】；
  设【蛇的长度】的值为：《获取全局变量》：“蛇的长度”;
  设【蛇的节点】的值为：【x】、1000相乘的结果;
  设【蛇的节点】的值为：【蛇的节点】、【y】相加;
  设【蛇数据】的第【蛇的长度】行0列 的值为：【蛇的节点】;
  设【蛇的长度】的值为：【蛇的长度】、1相加；
  《设置全局变量》：“蛇的长度”，【蛇的长度】;
  返回【蛇的长度】;
。

有一种方法 接受输入：【蛇数据】、【地图宽】、【地图高】 ，取名为 【生成新的食物】：
  有一个数字0，取名为【X】；
  有一个数字0，取名为【Y】；
  有一个数字0，取名为【蛇的长度】；
  有一个数字0，取名为【I】；
  有一个数字0，取名为【蛇节点】；
  有一个数字0，取名为【蛇节点X】；
  有一个数字0，取名为【蛇节点Y】；
  有一个逻辑量 【是】，取名为【需要继续生成】；
  
  当【需要继续生成】执行下列操作：
    设【X】的值为：《随机数》：1,【地图宽】、2相减；
    设【Y】的值为：《随机数》：1,【地图高】、2相减；
    
    设【蛇的长度】的值为：《获取全局变量》：“蛇的长度”;
    下列操作执行【蛇的长度】次：
      设【蛇节点】的值为：【蛇数据】的第【I】行0列；
      设【蛇节点X】的值为：《向下取整》：【蛇节点】、1000相除、2相乘；
      设【蛇节点Y】的值为：《向下取整》：【蛇节点】、1000求余；
      如果【蛇节点X】等于【X】而且【蛇节点Y】等于【Y】，则：跳出循环。
      设【I】的值为：【I】、1相加的结果；
    。
    如果【I】等于【蛇的长度】，则：设【需要继续生成】的值为：【否】。
  。
  返回【X】、1000相乘的结果、【Y】相加；
。

有一种方法 接受输入：【地图宽】、【地图高】 ，取名为 【绘制地图】：
  有一个数字0，取名为【地图X边界】；
  有一个数字0，取名为【地图Y边界】；
  有一个数字0，取名为【行】；
  有一个数字0，取名为【列】；
  设【地图Y边界】的值为：【地图高】、1相减的结果;
  设【地图X边界】的值为：【地图宽】、1相减的结果;
  《设置窗口光标位置》：0，0;
  下列操作执行【地图高】次：
    设【列】的值为：0；
    下列操作执行【地图宽】次：
      如果【行】等于0 
          或者 【列】等于0 
          或者 【行】等于【地图X边界】
          或者 【列】等于【地图Y边界】
      则：《设置窗口背景色》:"DarkRed"。
      否则：《设置窗口背景色》:"DarkBlue"。
      《输出》：“  ”；
      设【列】的值为：【列】、1相加的结果；
    。
    设【行】的值为：【行】、1相加的结果；
    <输出>：《换行符》；
  。
  《设置窗口光标位置》：0，0;
  返回 0；
。 

有一种方法 接受输入：【蛇数据】 ，取名为 【绘制蛇】：
  有一个数字0，取名为【数据行数】；
  有一个数字0，取名为【蛇的长度】；
  有一个数字0，取名为【n】；
  有一个数字0，取名为【x】；
  有一个数字0，取名为【y】；
  
  设【数据行数】的值为：<取阵列的行数>:【蛇数据】;
  设【蛇的长度】的值为：《获取全局变量》：“蛇的长度”;
  下列操作执行【数据行数】次，使用计数器【i】：
    设【n】的值为：【蛇数据】的第【i】行0列；
    设【x】的值为：《向下取整》：【n】、1000相除、2相乘；
    设【y】的值为：《向下取整》：【n】、1000求余；
    《设置窗口光标位置》：【x】，【y】;
    《设置窗口背景色》:"DarkBlue"；
    如果【i】等于0，则：《输出》：“●”。否则：《输出》：“█”。
    如果【i】大于【蛇的长度】或者 【i】等于【蛇的长度】，则：跳出循环。
  。
  《设置窗口光标位置》：0，0;
  返回 0；
。

有一种方法 接受输入：【食物数据】 ，取名为 【绘制食物】：
  有一个数字0，取名为【x】；
  有一个数字0，取名为【y】；
  设【x】的值为：《向下取整》：【食物数据】、1000相除、2相乘；
  设【y】的值为：《向下取整》：【食物数据】、1000求余；
  《设置窗口光标位置》：【x】，【y】;
  《设置窗口背景色》:"Green"；
  《输出》：“  ”；
  《设置窗口光标位置》：0，0;
  返回 0；
。

有一种方法 接受输入：【蛇数据】 ，取名为 【移动蛇】：
  有一个数字0，取名为【横向方向】；
  有一个数字0，取名为【纵向方向】；
  设【横向方向】的值为：《获取全局变量》：“横向移动方向”；
  设【纵向方向】的值为：《获取全局变量》：“纵向移动方向”；
  如果【横向方向】等于0 而且 【纵向方向】等于0 ，则：返回。
  
  有一个数字0，取名为【X】；
  有一个数字0，取名为【Y】；
  有一个数字0，取名为【原节点】；
  有一个数字0，取名为【新节点】；
  有一个数字0，取名为【当前节点】；
  有一个数字1，取名为【索引】；
  有一个数字0，取名为【蛇的长度】；
  
  设【蛇的长度】的值为：《获取全局变量》：“蛇的长度”;
  设【当前节点】的值为：【蛇数据】的第0行0列；
  设【原节点】的值为：【当前节点】；
  设【新节点】的值为：【原节点】；
  设【X】的值为：《向下取整》：【当前节点】、1000相除的结果、【横向方向】相加；
  设【Y】的值为：《向下取整》：【当前节点】、1000取余数的结果、【纵向方向】相加；
  设【蛇数据】的第0行0列 的值为：【X】、1000相乘的结果、【Y】相加；
  当【索引】小于【蛇的长度】，执行下列操作：
    设【新节点】的值为：【蛇数据】的第【索引】行0列；
    设【蛇数据】的第【索引】行0列 的值为：【原节点】；
    设【原节点】的值为：【新节点】；
    设【索引】的值为：【索引】、1相加；
  。
  《绘制蛇》：【蛇数据】；
  设【X】的值为：《向下取整》：【新节点】、1000相除的结果、2相乘；
  设【Y】的值为：《向下取整》：【新节点】、1000取余数；
  《设置窗口光标位置》：【X】，【Y】;
  《设置窗口背景色》:"DarkBlue"；
  《输出》：“  ”；
  《设置窗口光标位置》：0，0;
。

有一种方法 取名为 【处理控制按键】：
  有一个数字0，取名为【横向偏移】；
  有一个数字0，取名为【纵向偏移】；
  有一句话“None”，取名为【键值】；
  《设置窗口光标位置》：0，0;
  设【键值】的值为：《读取按键值》；
  
  如果【键值】等于 “W” 或者 【键值】等于 “UpArrow”，
  则：
    设【纵向偏移】的值为：【纵向偏移】、1相减；
    设【横向偏移】的值为：0；
  。
  
  如果【键值】等于 “S” 或者 【键值】等于 “DownArrow”，
  则：
    设【纵向偏移】的值为：【纵向偏移】、1相加；
    设【横向偏移】的值为：0；
  。
  
  如果【键值】等于 “A” 或者 【键值】等于 “LeftArrow”，
  则：
    设【横向偏移】的值为：【横向偏移】、1相减；
    设【纵向偏移】的值为：0；
  。
  如果【键值】等于 “D” 或者 【键值】等于 “RightArrow”，
  则：
    设【横向偏移】的值为：【横向偏移】、1相加；
    设【纵向偏移】的值为：0；
  。
  
  如果【横向偏移】不等于0 或者 【纵向偏移】不等于0，
  则：
    《设置全局变量》：“横向移动方向”，【横向偏移】；
    《设置全局变量》：“纵向移动方向”，【纵向偏移】；
    返回 【真】；
  。
  返回 【假】；
。

有一种方法 接受输入：【速度】，取名为 【处理游戏时间】：
  有一个数字0，取名为【更新时间】；
  有一个数字0，取名为【现在时间】；
  有一个数字0，取名为【周期】；
  设【现在时间】的值为：《取当前时间》;
  设【更新时间】的值为：《获取全局变量》：“下一次更新时间”;
  如果【现在时间】大于【更新时间】，
  则：
    如果【速度】大于10，则：设【速度】的值为：10。
    设【速度】的值为：10、【速度】相减;
    设【周期】的值为：50、【速度】相乘;
    《设置全局变量》：“下一次更新时间”，【现在时间】、【周期】相加；
    返回 【更新时间】 大于0；
  。
  返回 【假】；
。

有一种方法 
接受输入：
        【蛇数据】、
        【食物】、
        【地图宽】、
        【地图高】，
取名为 【碰撞检测】：
  有一个数字0，取名为【蛇头X】；
  有一个数字0，取名为【蛇头Y】；
  有一个数字0，取名为【蛇头节点】；
  有一个数字0，取名为【蛇节点】；
  有一个数字0，取名为【X】；
  有一个数字0，取名为【Y】；
  有一个数字0，取名为【索引】；
  有一个数字0，取名为【地图X边界】；
  有一个数字0，取名为【地图Y边界】；
  有一个数字0，取名为【蛇的长度】；

  设【蛇的长度】的值为：《获取全局变量》：“蛇的长度”;

  设【蛇头节点】的值为：【蛇数据】的第0行0列；
  设【蛇头X】的值为：《向下取整》：【蛇头节点】、1000相除的结果；
  设【蛇头Y】的值为：《向下取整》：【蛇头节点】、1000取余数的结果；
  
  设【X】的值为：《向下取整》：【食物】、1000相除的结果；
  设【Y】的值为：《向下取整》：【食物】、1000取余数的结果；
  如果【蛇头X】等于【X】而且【蛇头Y】等于【Y】，
  则：
    设【蛇的长度】的值为：《蛇吃进食物》：【蛇数据】，【X】，【Y】；
    返回 1;
  。
  
  设【索引】的值为：1；
  当【索引】小于【蛇的长度】，执行下列操作：
    设【蛇节点】的值为：【蛇数据】的第【索引】行0列；
    设【X】的值为：《向下取整》：【蛇节点】、1000相除的结果；
    设【Y】的值为：《向下取整》：【蛇节点】、1000取余数的结果；
    如果【蛇头X】等于【X】而且【蛇头Y】等于【Y】，
    则：
      《设置全局变量》：“游戏结束？”，【是】；
      返回 -1;
    。
    设【索引】的值为：【索引】、1相加；
  。
  
  设【地图Y边界】的值为：【地图高】、1相减的结果;
  设【地图X边界】的值为：【地图宽】、1相减的结果;
  
  如果
      【蛇头X】等于0 
      或者 【蛇头Y】等于0 
      或者 【蛇头X】等于【地图X边界】 
      或者 【蛇头Y】等于【地图Y边界】 
  则：
    《设置全局变量》：“游戏结束？”，【是】；
    返回 -2；
  。
  返回 0；
。

有一种方法 取名为 【入口】：
  有一个数字29，取名为【地图宽】；
  有一个数字29，取名为【地图高】；
  有一个阵列：29行 29列，取名为【地图】；
  有一个阵列：1024行 1列，取名为【蛇】；
  有一个数字0，取名为【食物】；
  有一个逻辑量 【否】，取名为【检测到按键？】；
  有一个逻辑量 【否】，取名为【检测到时间？】；
  有一个逻辑量 【否】，取名为【游戏结束？】；
  有一个数字1，取名为【游戏速度】；
  有一个数字0，取名为【横向方向】；
  有一个数字0，取名为【纵向方向】；
  有一个数字0，取名为【碰撞结果】；

  《设置全局变量》：“横向移动方向”，0；
  《设置全局变量》：“纵向移动方向”，0；
  《设置全局变量》：“下一次更新时间”，0；
  《设置全局变量》：“游戏结束？”，【否】；
  《设置全局变量》：“蛇的长度”，0；
  《设置窗口标题》："贪吃蛇"；
  《设置窗口背景色》:"DarkBlue"；
  《设置窗口前景色》:"White"；
  设【游戏速度】的值为：《转为数字》：《输入》：“输入游戏难度[0-10]:”；
  设【食物】的值为：《生成新的食物》：【蛇】，【地图宽】，【地图高】；
  《蛇吃进食物》：【蛇】，15，15；
  《绘制地图》：【地图宽】，【地图高】；
  《绘制蛇》：【蛇】；
  《绘制食物》：【食物】；
  当【游戏结束？】 等于【否】执行下列操作：
    设【检测到按键？】的值为：《处理控制按键》;
    设【检测到时间？】的值为：《处理游戏时间》：【游戏速度】;
    如果 【检测到按键？】 或者 【检测到时间？】，
    则：
      《移动蛇》：【蛇】；
      设【碰撞结果】的值为：《碰撞检测》：【蛇】，【食物】，【地图宽】，【地图高】；
      如果【碰撞结果】大于零，
      则：
        设【食物】的值为：《生成新的食物》：【蛇】，【地图宽】，【地图高】；
      。
      《绘制食物》：【食物】；
    。
    设【游戏结束？】的值为：《获取全局变量》：“游戏结束？”
  。
  《设置窗口背景色》:"Red"；
  《设置窗口光标位置》：30，15;
  《输出》：“游戏结束!”；
  返回 0；
。
《入口》；